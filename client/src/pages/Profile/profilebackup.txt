import React, { useState } from "react";

import { Pencil, Save, X, Upload } from "lucide-react";

interface FamilyMember {
  firstName: string;
  lastName: string;
  relationship: string;
  whatsappId: string;
  emailId: string;
  image: string;
  gender: string;
  bloodgroup: string;
}

interface User {
  _id: string;
  image: string;
  firstname: string;
  lastname: string;
  title: string;
  Dob: string;
  location: string;
  address: string;
  whatsappId: string;
  email: string;
  emergencyContactInIndia: string;
  districtInIndia: string;
  addressInIndia: string;
  state: string;
  familyInLagos: boolean;
  familyMembers: FamilyMember[];
  password?: string;
  confirmPassword?: string;
  memberId?: string;
  gender: string;
  bloodgroup: string;
}

const initialUser: User = {
  _id: "67aca819753634a3c8b35b7c",
  image:
    "https://img.freepik.com/premium-vector/indian-woman-traditional-dress-avatar-social-network-fashion-illustration_981400-162.jpg?w=360",
  firstname: "Wisdom",
  lastname: "Lamodot",
  title: "MR",
  Dob: "2025-02-27T00:00:00.000Z",
  location: "Ikeja/Ikorodu/Ota",
  address: "83 Opebi Rd, Opebi, Ikeja, Lagos, Nigeria",
  whatsappId: "+2348989898989",
  email: "lopice5780@cybtric.com",
  gender: "Male",
  bloodgroup: "O+",
  emergencyContactInIndia: "+919847543302",
  districtInIndia: "Daman and Diu",
  addressInIndia: "83 Opebi Rd, Opebi, Ikeja, Lagos, Nigeria",
  state: "Adamawa",
  familyInLagos: true,
  familyMembers: [
    {
      firstName: "Mekukele",
      lastName: "Zambia",
      relationship: "Daughter",
      whatsappId: "+2349090909090",
      emailId: "lamodots@gmail.com",
      image:
        "https://thumbs.dreamstime.com/b/indian-boy-face-avatar-cartoon-indian-young-boy-face-profile-picture-avatar-cartoon-character-portrait-vector-illustration-graphic-150835356.jpg",
      gender: "Male",
      bloodgroup: "O+",
    },
    {
      firstName: "Zazam",
      lastName: "Mike",
      relationship: "Father",
      whatsappId: "+2348080808088",
      emailId: "user@gmail.com",
      image:
        "https://previews.123rf.com/images/jemastock/jemastock1909/jemastock190926314/130721128-indian-man-face-with-moustache-and-bald-profile-picture-avatar-cartoon-character-portrait-vector.jpg",
      gender: "Male",
      bloodgroup: "O+",
    },
  ],
};

function Profile() {
  const [user, setUser] = useState<User>(initialUser);
  const [isEditing, setIsEditing] = useState(false);
  const [passwordError, setPasswordError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState("");

  // Handle input changes for user fields
  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setUser((prevUser) => ({ ...prevUser, [name]: value }));
  };

  // Handle image upload for the user
  const handleUserImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      setUser((prevUser) => ({ ...prevUser, image: imageUrl }));
    }
  };

  // Handle input changes for family members
  const handleFamilyMemberChange = (
    index: number,
    field: keyof FamilyMember,
    value: string
  ) => {
    const updatedFamilyMembers = [...user.familyMembers];
    updatedFamilyMembers[index][field] = value;
    setUser((prevUser) => ({
      ...prevUser,
      familyMembers: updatedFamilyMembers,
    }));
  };

  // Handle image upload for family members
  const handleFamilyMemberImageUpload = (
    index: number,
    e: React.ChangeEvent<HTMLInputElement>
  ) => {
    const file = e.target.files?.[0];
    if (file) {
      const imageUrl = URL.createObjectURL(file);
      handleFamilyMemberChange(index, "image", imageUrl);
    }
  };

  // Handle form submission
  const handleSubmit = async () => {
    if (
      user.password &&
      user.confirmPassword &&
      user.password !== user.confirmPassword
    ) {
      setPasswordError("Passwords do not match.");
      return;
    }

    setPasswordError("");
    setIsLoading(true);

    try {
      const formData = new FormData();
      Object.entries(user).forEach(([key, value]) => {
        if (key === "familyMembers") {
          formData.append(key, JSON.stringify(value));
        } else if (key === "image" && typeof value !== "string") {
          formData.append(key, value);
        } else {
          formData.append(key, value as string);
        }
      });

      const response = await fetch("/api/profile", {
        method: "PUT",
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || "Failed to save changes.");
      }

      alert("Profile updated successfully!");
    } catch (error: any) {
      setApiError(error.message || "An error occurred while saving changes.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto bg-white shadow-lg rounded-lg p-6">
      <strong>MEMBERSHIP ID:{user?.memberId}</strong>
      <div className="mt-6 flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-800">Profile</h1>
        <button
          onClick={() => setIsEditing(!isEditing)}
          className={`px-4 py-2 rounded ${
            isEditing ? "bg-red-500 text-white" : "bg-blue-500 text-white"
          } flex items-center`}
        >
          {isEditing ? <X className="mr-2" /> : <Pencil className="mr-2" />}
          {isEditing ? "Cancel" : "Edit"}
        </button>
      </div>

      <div className="flex flex-col md:flex-row items-center mb-6">
        <div className="relative">
          <img
            src={user.image}
            alt={`${user.firstname} ${user.lastname}`}
            className="w-32 h-32 rounded-full object-cover mb-4 md:mb-0 md:mr-6"
          />
          {isEditing && (
            <label
              htmlFor="user-image-upload"
              className="absolute bottom-0 right-0 bg-blue-500 text-white rounded-full p-2 cursor-pointer"
            >
              <Upload />
            </label>
          )}
          <input
            id="user-image-upload"
            type="file"
            accept="image/*"
            className="hidden"
            onChange={handleUserImageUpload}
          />
        </div>
        <div>
          {isEditing ? (
            <>
              <input
                type="text"
                name="firstname"
                value={user.firstname}
                onChange={handleInputChange}
                placeholder="First Name"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="text"
                name="lastname"
                value={user.lastname}
                onChange={handleInputChange}
                placeholder="Last Name"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="date"
                name="Dob"
                value={new Date(user.Dob).toISOString().split("T")[0]}
                onChange={handleInputChange}
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="text"
                name="location"
                value={user.location}
                onChange={handleInputChange}
                placeholder="Location"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <textarea
                name="address"
                value={user.address}
                onChange={handleInputChange}
                placeholder="Address"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="text"
                name="whatsappId"
                value={user.whatsappId}
                onChange={handleInputChange}
                placeholder="WhatsApp ID"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="email"
                name="email"
                value={user.email}
                onChange={handleInputChange}
                placeholder="Email"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="text"
                name="emergencyContactInIndia"
                value={user.emergencyContactInIndia}
                onChange={handleInputChange}
                placeholder="Emergency Contact in India"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="text"
                name="addressInIndia"
                value={user.addressInIndia}
                onChange={handleInputChange}
                placeholder="Address in India"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="text"
                name="state"
                value={user.state}
                onChange={handleInputChange}
                placeholder="State"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="password"
                name="password"
                value={user.password || ""}
                onChange={handleInputChange}
                placeholder="New Password"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              <input
                type="password"
                name="confirmPassword"
                value={user.confirmPassword || ""}
                onChange={handleInputChange}
                placeholder="Confirm Password"
                className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
              />
              {passwordError && <p className="text-red-500">{passwordError}</p>}
            </>
          ) : (
            <div>
              <h1 className="text-2xl font-bold text-gray-800">
                {user.title} {user.firstname} {user.lastname}
              </h1>
              <p className="text-gray-600">
                Date of Birth: {new Date(user.Dob).toLocaleDateString()}
              </p>
              <p className="text-gray-600">Location: {user.location}</p>
              <p className="text-gray-600">Address: {user.address}</p>
              <p className="text-gray-600">WhatsApp: {user.whatsappId}</p>
              <p className="text-gray-600">Email: {user.email}</p>
              <p className="text-gray-600">
                Emergency Contact in India: {user.emergencyContactInIndia}
              </p>
              <p className="text-gray-600">
                Address in India: {user.addressInIndia}
              </p>
              <p className="text-gray-600">State: {user.state}</p>
            </div>
          )}
        </div>
      </div>

      <div>
        <h2 className="text-xl font-semibold text-gray-800 mb-2">
          Family Members
        </h2>
        {user.familyMembers.map((member, index) => (
          <div key={index} className="bg-gray-100 p-4 rounded-lg mb-4">
            <div className="flex items-center mb-4">
              <div className="relative">
                <img
                  src={member.image || "https://via.placeholder.com/100"}
                  alt={`${member.firstName} ${member.lastName}`}
                  className="w-20 h-20 rounded-full object-cover mr-4"
                />
                {isEditing && (
                  <label
                    htmlFor={`family-member-image-upload-${index}`}
                    className="absolute bottom-0 right-0 bg-blue-500 text-white rounded-full p-2 cursor-pointer"
                  >
                    <Upload />
                  </label>
                )}
                <input
                  id={`family-member-image-upload-${index}`}
                  type="file"
                  accept="image/*"
                  className="hidden"
                  onChange={(e) => handleFamilyMemberImageUpload(index, e)}
                />
              </div>
              <div>
                {isEditing ? (
                  <>
                    <input
                      type="text"
                      value={member.firstName}
                      onChange={(e) =>
                        handleFamilyMemberChange(
                          index,
                          "firstName",
                          e.target.value
                        )
                      }
                      placeholder="First Name"
                      className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
                    />
                    <input
                      type="text"
                      value={member.lastName}
                      onChange={(e) =>
                        handleFamilyMemberChange(
                          index,
                          "lastName",
                          e.target.value
                        )
                      }
                      placeholder="Last Name"
                      className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
                    />
                    <input
                      type="text"
                      value={member.relationship}
                      onChange={(e) =>
                        handleFamilyMemberChange(
                          index,
                          "relationship",
                          e.target.value
                        )
                      }
                      placeholder="Relationship"
                      className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
                    />
                    <input
                      type="text"
                      value={member.whatsappId}
                      onChange={(e) =>
                        handleFamilyMemberChange(
                          index,
                          "whatsappId",
                          e.target.value
                        )
                      }
                      placeholder="WhatsApp ID"
                      className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
                    />
                    <input
                      type="email"
                      value={member.emailId}
                      onChange={(e) =>
                        handleFamilyMemberChange(
                          index,
                          "emailId",
                          e.target.value
                        )
                      }
                      placeholder="Email"
                      className="border border-gray-300 rounded px-3 py-2 mb-2 w-full"
                    />
                  </>
                ) : (
                  <div>
                    <h3 className="text-lg font-medium text-gray-800">
                      {member.firstName} {member.lastName}
                    </h3>
                    <p className="text-gray-600">
                      Relationship: {member.relationship}
                    </p>
                    <p className="text-gray-600">
                      WhatsApp: {member.whatsappId}
                    </p>
                    <p className="text-gray-600">Email: {member.emailId}</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      {isEditing && (
        <button
          onClick={handleSubmit}
          disabled={isLoading}
          className={`bg-green-500 text-white px-4 py-2 rounded mt-4 flex items-center justify-center ${
            isLoading ? "opacity-50 cursor-not-allowed" : ""
          }`}
        >
          {isLoading ? (
            <span className="flex items-center">
              <svg
                className="animate-spin mr-2 h-5 w-5 text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.963 7.963 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Saving...
            </span>
          ) : (
            <span className="flex items-center">
              <Save className="mr-2" />
              Save Changes
            </span>
          )}
        </button>
      )}

      {apiError && <p className="text-red-500 mt-4">{apiError}</p>}
    </div>
  );
}

export default Profile;
